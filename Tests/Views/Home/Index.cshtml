@using System.Diagnostics
@using FluentDataAnnotations.Helpers.HtmlHelpers
@{
    var watch = new Stopwatch();
    watch.Start();
}

@model WebApplication1.Models.TestModel
@{
    ViewBag.Title = "Fluent Annotation Test Page";
}

<h2>Fluent Annotation Test Page</h2>

@using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken() 
    <h1>Custom Editors</h1>

    <div class="form-group">
        @Html.LabelForEdit(m => m.OldPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.OldPassword, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelForEdit(m => m.NewPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.NewPassword)
        </div>
    </div>
    <div class="form-group" style="border-width: 2px; border-color: black; border-style: dotted;">
        @Html.LabelForEdit(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group" style="border-width: 2px; border-color: black; border-style: dotted;">
        <p>Edit For Hidden</p>
        @Html.LabelForEdit(m => m.HiddenTest, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.HiddenTest, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group" style="border-width: 2px; border-color: black; border-style: dotted;">
        <p>Edit For Datetime</p>
        @Html.LabelForEdit(m => m.Time, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.Time, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group" style="border-width: 2px; border-color: black; border-style: dotted;">
        <p>Edit For NulableBoolean</p>
        @Html.LabelForEdit(m => m.NulableBoolean, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.NulableBoolean, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group" style="border-width: 2px; border-color: black; border-style: dotted;">
        @Html.LabelForEdit(m => m.SelectedIds, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.SelectedIds, new { htmlAttributes = new { @class = "form-control" } })
            @*@Html.SmartDropDownListFor(m => m.SelectedIds, Model.Ids, new { @class = "form-control" })*@
        </div>
    </div>

    <div class="form-group">
        @Html.LabelForEdit(m => m.Phone, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.Phone, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Change password" class="btn btn-default" />
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@{
    watch.Stop();
    <h1>View Render time: @watch.ElapsedMilliseconds</h1>
}