
@using FluentDataAnnotations
@using FluentDataAnnotations.Helpers.HtmlHelpers
@if (!ViewData.ModelMetadata.ShowForEdit)
{
    return;
}

@if (ViewData.ModelMetadata.IsReadOnly && !ViewData.ModelMetadata.AdditionalValues.ContainsKey(Utilities.DisplayAsDisabledInputKey))
{
    @Html.Encode(ViewData.TemplateInfo.FormattedModelValue)
    @Html.Hidden(string.Empty, ViewData.TemplateInfo.FormattedModelValue)
    return;
}
@{
    RouteValueDictionary props = HtmlHelper.AnonymousObjectToHtmlAttributes(ViewData["htmlAttributes"]);
    if (ViewData.ModelMetadata.IsReadOnly)
    {
        props["disabled"] = "disabled";
        @Html.Hidden(string.Empty, ViewData.TemplateInfo.FormattedModelValue)
    }

    string ddKey = ViewData.ModelMetadata.PropertyName + Utilities.DropDownPropertiesKey;
    string cascadeKey = ViewData.ModelMetadata.PropertyName + Utilities.CascadeDropDownPropertiesKey;

    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey(ddKey))
    {
        var ddProps = ViewData.ModelMetadata.AdditionalValues[ddKey] as DropDownProperties;

        if (ddProps != null)
        {
            @Html.SmartDropDownList(string.Empty, ddProps.SelectList, ddProps.OptionLabel ?? string.Empty, props);
            return;
        }
    }

    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey(cascadeKey))
    {
        var cddProps = ViewData.ModelMetadata.AdditionalValues[cascadeKey] as CascadeDropDownProperties;
        if (cddProps != null)
        {
            @Html.CascadingDropDownList(string.Empty, ViewData.ModelMetadata.PropertyName, cddProps.TriggeredByPropertyId, cddProps.Url, cddProps.ActionParam, cddProps.OptionLabel ?? string.Empty, cddProps.DisabledWhenParentNotSelected, props);
        }
    }

}