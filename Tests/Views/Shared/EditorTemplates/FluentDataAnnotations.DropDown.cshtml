@using System.Web.Mvc
@using System.Web.Mvc.Html
@using FluentDataAnnotations
@using FluentDataAnnotations.Helpers.HtmlHelpers

@if (!ViewData.ModelMetadata.ShowForEdit)
{
    return;
}

@if (ViewData.ModelMetadata.IsReadOnly && !ViewData.ModelMetadata.AdditionalValues.ContainsKey(Utilities.DisplayAsDisabledInputKey))
{
    @Html.Encode(ViewData.TemplateInfo.FormattedModelValue)
    @Html.Hidden("", ViewData.TemplateInfo.FormattedModelValue)
    return;
}
@{
    var props = HtmlHelper.AnonymousObjectToHtmlAttributes(ViewData["htmlAttributes"]);
    if (ViewData.ModelMetadata.IsReadOnly)
    {
        props["disabled"] = "disabled";
        @Html.Hidden("", ViewData.TemplateInfo.FormattedModelValue)
    }

    var selectListKey = ViewData.ModelMetadata.PropertyName + Utilities.SelectListKey;
    var optionLabelKey = ViewData.ModelMetadata.PropertyName + Utilities.OptionLabelForDropDownKey;
    var optionLabel = (string)ViewData.ModelMetadata.AdditionalValues[optionLabelKey];
    @(optionLabel.IsNullOrWhiteSpace() 
    ? Html.SmartDropDownList("", (IEnumerable<SelectListItem>)ViewData.ModelMetadata.AdditionalValues[selectListKey], props) 
    : Html.SmartDropDownList("", (IEnumerable<SelectListItem>)ViewData.ModelMetadata.AdditionalValues[selectListKey], optionLabel, props))
}
