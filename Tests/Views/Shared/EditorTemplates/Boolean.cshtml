@using System.Web.Mvc
@using System.Web.Mvc.Html
@using FluentDataAnnotations

@if (!ViewData.ModelMetadata.ShowForEdit)
{
    return;
}

@if (ViewData.ModelMetadata.IsReadOnly && !ViewData.ModelMetadata.AdditionalValues.ContainsKey(Utilities.DisplayAsDisabledInputKey))
{
    @Html.Encode(ViewData.TemplateInfo.FormattedModelValue)
    return;
}

@{
    var props = HtmlHelper.AnonymousObjectToHtmlAttributes(ViewData["htmlAttributes"]);
    if (ViewData.ModelMetadata.IsReadOnly)
    {
        props["readonly"] = "readonly";      
    }

    bool? value = null;
    if (ViewData.Model != null)
    {
        value = Convert.ToBoolean(ViewData.Model, System.Globalization.CultureInfo.InvariantCulture);
    }

    if (ViewData.ModelMetadata.IsNullableValueType)
    {

        var triStateValues = new List<SelectListItem>
        {
            new SelectListItem {Text = "Not Set", Value = String.Empty, Selected = !value.HasValue},
            new SelectListItem {Text = "True", Value = "true", Selected = value.HasValue && value.Value},
            new SelectListItem {Text = "False", Value = "false", Selected = value.HasValue && !value.Value},
        };

        props["class"] = props.ContainsKey("class") ? props["class"] + " list-box tri-state" : "list-box tri-state";
        @Html.DropDownList("", triStateValues, props)
    }
    else
    {
        props["class"] = props.ContainsKey("class") ? props["class"] + " check-box" : "check-box"; 
        @Html.CheckBox("", value ?? false, props)
    }
}

